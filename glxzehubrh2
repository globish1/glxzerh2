local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
 
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
 
 
local Window = Library:CreateWindow({
    Title = 'Glxze Hub | RH2',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})
 
 
local Tabs = {
    Main = Window:AddTab('Main'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}
 
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Shooting')
LeftGroupBox:AddToggle('MyToggle', {
    Text = 'Auto Time',
    Default = false, -- Default value (true / false)
    Tooltip = 'Only works on moving shots', -- Information shown when you hover over the toggle
 
    Callback = function(Value)local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local Backpack = LocalPlayer.Backpack
        local ActionValues = Backpack.ActionValues
        local PlayerEvents = Backpack.PlayerEvents
        
        local function handlePowerChanged()
            if ActionValues.Power.Value >= 61.5 then
        PlayerEvents.Shooting:FireServer(false, "Shooting", "Standing Shot")
            end
        end
        
        ActionValues.Power:GetPropertyChangedSignal("Value"):Connect(handlePowerChanged)
        print('[cb] MyToggle changed to:', Value)
    end
})
 
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('.')
LeftGroupBox:AddToggle('MyToggle', {
    Text = 'Inf Stamina',
    Default = false, -- Default value (true / false)
    Tooltip = 'Only works on moving shots', -- Information shown when you hover over the toggle
 
    Callback = function(Value)local Dick = game:GetService("Players").LocalPlayer.Backpack.ActionValues.Stamina
 
        local DickMoney
        DickMoney = hookmetamethod(game, "__index", function(self, v)
            if self == Dick and v == "Value" then
                return 9e9
            end
            return DickMoney(self, v)
        end)
        print('[cb] MyToggle changed to:', Value)
    end
})
 
 
MenuGroup:AddButton('Unload', function() Library:Unload() end)
 
 
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
Library.ToggleKeybind = Options.MenuKeybind 
 
 
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
 
 
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')
 
 
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
 
 
SaveManager:LoadAutoloadConfig()

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings'])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()

